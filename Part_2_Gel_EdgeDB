

# Part 2 – Gel/EdgeDB

Gel/EdgeDB introduces a **graph-relational data model** in which data is organized as object types connected by explicit links, eliminating traditional JOIN operations and intuitively representing complex networks and hierarchies. Its native **EdgeQL** query language offers concise, hierarchical `SELECT`, `INSERT`, and `UPDATE` operations, supporting nested data retrieval and automatic type validation in a single statement. The platform also provides **integrated developer tools**—including a schema browser, data editor, visual query builder, and web‑based REPL—that facilitate live schema introspection and seamless query prototyping within a unified web interface.

For building richly connected knowledge bases or applications with complex data models, Gel’s **enhanced data modeling** allows developers to define relationships natively within the schema. **Simplified querying** with EdgeQL enables fetching nested or related records—such as retrieving an object along with its linked references—in a single, readable command. The combination of **type‑safe schema definitions** and built‑in tooling accelerates development workflows, minimizes runtime errors, and streamlines schema evolution and validation.

Adopting Gel requires considering its **learning curve**, as teams familiar with relational SQL must adapt to graph-relational concepts and EdgeQL syntax. As a newer platform built on PostgreSQL, Gel’s **ecosystem maturity** may not yet match more established databases in terms of third‑party integrations and community‑driven tooling. Additionally, the abstraction layers and query planning overhead can introduce **performance considerations** that necessitate targeted indexing and optimization for latency‑sensitive workloads.
